name: DevSecOps CI/CD

on:
  push:
    branches:
      - main

jobs:
  validate-terraform:
    name: Terraform Validation & tfsec
    runs-on: ubuntu-latest
    permissions:
      contents: read
      
    steps:
      - uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4 # Use the latest stable version if available
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.5

      - name: Terraform Variables from repo secrets
        run: |
          cat <<EOF > terraform/terraform.tfvars
          ${{ secrets.TERRAFORM_TFVARS }}
          EOF
        shell: bash

      - name: Terraform Init
        run: |
          cd terraform
          terraform init

      - name: Terraform Validate
        run: 
          terraform validate

      - name: Run tfsec (Terraform security scan)
        uses: aquasecurity/tfsec-action@v1.0.0

      - name: Cleanup Existing AWS Resources (Optional)
        run: |
          echo "⛔ Starting cleanup of existing AWS resources..."

          AWS_REGION="us-east-1"
          BUCKETS=("my-artfct-bkt-123456" "devscops-artifacts-bucket")
          ROLES=("devscops-codebuild-role" "devscops-codepipeline-role" "devscops-ec2-role")
          POLICIES=("devscops-ec2-s3-access")
          ECR_REPO="devscops-ecr"
          CODEDEPLOY_APP="devscops-codedeploy-app"

          # -------- Delete S3 Buckets --------
          for bucket in "${BUCKETS[@]}"; do
            if aws s3api head-bucket --bucket "$bucket" 2>/dev/null; then
              echo "Deleting S3 bucket: $bucket"
              aws s3 rb "s3://$bucket" --force
            fi
          done

          # -------- Delete IAM Roles --------
          for role in "${ROLES[@]}"; do
            if aws iam get-role --role-name "$role" 2>/dev/null; then
              echo "Deleting IAM Role: $role"

              # Detach attached managed policies
              for policy_arn in $(aws iam list-attached-role-policies --role-name "$role" --query 'AttachedPolicies[*].PolicyArn' --output text); do
                echo "Detaching managed policy $policy_arn from $role"
                aws iam detach-role-policy --role-name "$role" --policy-arn "$policy_arn"
              done

              # Delete inline policies
              for policy_name in $(aws iam list-role-policies --role-name "$role" --query 'PolicyNames[*]' --output text); do
                echo "Deleting inline policy $policy_name from $role"
                aws iam delete-role-policy --role-name "$role" --policy-name "$policy_name"
              done

              # Delete the role
              aws iam delete-role --role-name "$role"
              echo "✅ Deleted IAM Role: $role"
            fi
          done

          # -------- Delete IAM Policies --------
          for policy in "${POLICIES[@]}"; do
            policy_arn=$(aws iam list-policies --scope Local --query "Policies[?PolicyName=='$policy'].Arn" --output text)
            if [ ! -z "$policy_arn" ]; then
              echo "Deleting IAM Policy: $policy"
              aws iam delete-policy --policy-arn "$policy_arn"
            fi
          done

          # -------- Delete ECR Repository --------
          if aws ecr describe-repositories --repository-names "$ECR_REPO" --region "$AWS_REGION" 2>/dev/null; then
            echo "Deleting ECR repository: $ECR_REPO"
            aws ecr delete-repository --repository-name "$ECR_REPO" --region "$AWS_REGION" --force
          fi

          # -------- Delete CodeDeploy App --------
          if aws deploy get-application --application-name "$CODEDEPLOY_APP" --region "$AWS_REGION" 2>/dev/null; then
            echo "Deleting CodeDeploy application: $CODEDEPLOY_APP"
            aws deploy delete-application --application-name "$CODEDEPLOY_APP" --region "$AWS_REGION"
          fi

          echo "✅ Cleanup complete."
        shell: bash
      - name: Terraform Apply
        run: |
          cd terraform
          terraform apply -auto-approve -input=false \
          -var "allowed_ip_range=106.222.191.221/32"

  docker-security:
    name: Docker Build & Trivy Scan
    runs-on: ubuntu-latest
    needs: validate-terraform
    steps:
      - uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build Docker image
        run: docker build -t myapp:latest .

      - name: Install Trivy
        run: |
          sudo apt-get install wget apt-transport-https gnupg lsb-release -y
          wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
          echo deb https://aquasecurity.github.io/trivy-repo/deb stable main | sudo tee -a /etc/apt/sources.list.d/trivy.list
          sudo apt-get update
          sudo apt-get install trivy -y

      - name: Scan Docker image with Trivy
        run: trivy image --exit-code 1 --severity CRITICAL,HIGH myapp:latest

  deploy-kubernetes:
    name: Apply Sealed Secrets & Deploy
    runs-on: ubuntu-latest
    needs: docker-security
    steps:
      - uses: actions/checkout@v3

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: v1.29.0

      - name: Configure Kubeconfig
        run: |
          mkdir -p ~/.kube
          echo "${{ secrets.KUBECONFIG_BASE64 }}" | base64 -d > ~/.kube/config

      - name: Apply Sealed Secrets
        run: kubectl apply -f k8s/secrets/sealed-secret.yaml

      - name: Deploy App to Kubernetes
        run: kubectl apply -f k8s/deployment.yaml
